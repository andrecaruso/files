Algorithm|Algorithm: is a well known and used word in CS due to coding, programming languages and its introductory courses. Two major concepts are addressed when talking about algorithms in the COMPUTATIONAL THINKING (CT) literature, the first is a step-wise design: “series of ordered steps” (ISTE and CSTA, 2011), “step-by-step set of instructions” (Selby and Woollard, 2014), “data “recipe” or set of instructions” (Berland and Lee, 2011) or “getting to a solution through a clear definition of the steps” (Csizmadia et al., 2015). The second is flow-wise design: “algorithmic notions such as basic flow of control” (Lu and Fletcher, 2009; Grover and Pea, 2013), “Algorithms often contain sets of related conditional logic” (Berland and Lee, 2011) or “Design logical and ordered instructions” (Shute et al., 2017). Denning (2017) spots how the “new COMPUTATIONAL THINKING (CT) movement” has resignified algorithms, taking away the notion of the computational models. He argues that now algorithms are depicted as recipes for carrying out tasks, something for all kinds of information processors, including humans. In contrast to what it used to be: a set of directions to control a computational model, deriving their precision from it. Today, the word “algorithm” is defined as “a step-by-step procedure for solving a problem or accomplishing some end” (Merriam-Webster, 2020). Etymologically, Etymonline (2020) says it comes from a series of transformations that have their origin in al-Khwarizmi the surname of an important mathematician, Muhammad ibn Musa al-Khwarizmi. Computer scientists assumed the challenge to make mindless beings perform complex tasks and it shaped the way they would envision, define and order instructions. Probably the most distinctive force that shapes our minds in a certain way in CS is objectivity at its finest. In a quest to eliminate intuition, subjectivity and ambiguity so those who have none of that (machines) could follow our orders, instructions and data must be so precisely mapped into their meanings that a mechanical, mindless being can “understand” them. That is exactly the special touch algorithms have, they are a special case of a composite instruction, an unambiguous one, which pervades all CS. Additionally, multiple cores and huge distributed systems granted a special place for parallelism on our instructions.



Algoritmo|Algoritmo: é uma palavra bastante conhecida e utilizada em CS devido a codificação, linguagens de programação e seus cursos introdutórios. Dois conceitos principais são abordados quando se fala em algoritmos na literatura de PENSAMENTO COMPUTACIONAL (CT), o primeiro é um design passo a passo: “série de passos ordenados” (ISTE e CSTA, 2011), “conjunto de instruções passo a passo ” (Selby e Woollard, 2014), “dados “receita” ou conjunto de instruções” (Berland e Lee, 2011) ou “chegar a uma solução por meio de uma definição clara das etapas” (Csizmadia et al., 2015). O segundo é o design de fluxo: “noções algorítmicas, como fluxo básico de controle” (Lu e Fletcher, 2009; Grover e Pea, 2013), “Algoritmos geralmente contêm conjuntos de lógica condicional relacionada” (Berland e Lee, 2011) ou “Desenhar instruções lógicas e ordenadas” (Shute et al., 2017). Denning (2017) aponta como o “novo movimento COMPUTATIONAL THINKING (CT)” ressignificou os algoritmos, tirando a noção dos modelos computacionais. Ele argumenta que agora os algoritmos são descritos como receitas para a realização de tarefas, algo para todos os tipos de processadores de informação, incluindo humanos. Ao contrário do que costumava ser: um conjunto de instruções para controlar um modelo computacional, derivando sua precisão a partir dele. Hoje, a palavra “algoritmo” é definida como “um procedimento passo a passo para resolver um problema ou alcançar algum fim” (Merriam-Webster, 2020). Etimologicamente, Etymonline (2020) diz que vem de uma série de transformações que têm sua origem em al-Khwarizmi o sobrenome de um importante matemático, Muhammad ibn Musa al-Khwarizmi. Os cientistas da computação assumiram o desafio de fazer seres irracionais realizarem tarefas complexas e isso moldou a maneira como eles imaginariam, definiriam e ordenariam instruções. Provavelmente, a força mais distinta que molda nossas mentes de uma certa maneira em CS é a objetividade em seu melhor. Em uma busca para eliminar intuição, subjetividade e ambiguidade para que aqueles que não têm nada disso (máquinas) possam seguir nossas ordens, instruções e dados devem ser mapeados com tanta precisão em seus significados que um ser mecânico e sem mente pode “entendê-los”. Isso é exatamente o que os algoritmos de toque especial têm, eles são um caso especial de uma instrução composta, inequívoca, que permeia todo o CS. Além disso, vários núcleos e enormes sistemas distribuídos concederam um lugar especial para paralelismo em nossas instruções.