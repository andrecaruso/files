Mechanics|Description|Score
Evaluation| The evaluation line Evaluation vs Analysis. “Analysis” and word derivations was found in 12 of the 28 CT defining resources reviewed, “data analysis” in four, and “evaluation” and derivations in 7 and any of those in 14. Those terms seem to be used interchangeably even though SELBY; WOOLLARD (2014) recommends to use “evaluation” but not “analysis”. MERRIAM-WEBSTER (2020) brings the following definitions for evaluation: “determination of the value, nature, character, or quality of something or someone” and analysis: “a detailed examination of anything complex in order to understand its nature or to determine its essential features: a thorough study”. We are going to use evaluation, but we consider the interchangeable use of both words acceptable. Term 18 – Evaluation: The process of defining or recognizing values through a detailed examination. Efficiency. Concepts of optimization and efficiency are even more consensual (17 out of 28) than the aforementioned broader terms. We consider efficiency a property and, in turn, property checking an evaluation task. Our review suggests that efficiency is an extraordinary property for the CT, a lot more mentioned than others or general property evaluation, so we keep highlighting it here. Efficiency is about a costbenefit analysis, while optimization is about increasing efficiency. Actually, this is how the common-sense defines optimization, because theoretically optimization is about reaching specifically the most favorable solution, design, system or state, meaning that there cannot possibly be an alternative that outmatches the optimal one. Properties. Referring to traits, qualities or virtues of something, properties may be found and/or quantified through analysis. CS turn it into an objective, mathematical process using formal verification for proving correctness, that is, proving (or disproving) that something is correct with respect of a given formal specification. Model checking, for instance, mathematically models something as a state system and presents a systematically exhaustive exploration of the states to prove specifications generally given in temporal logic. Along correctness, several other properties are commonly analyzed in CS, such as usability, portability, interoperability, flexibility, durability, reliability, safety and maintainability. Test and Debug. Also more popular in the literature than the broader terms (14 out of 28) testing and debugging are other evaluation tasks. With a common, consensual understanding, tests are experimental executions directed towards checking if or how something happens, often in a partial, controlled environment. On the other hand, what “debugging” means may vary from person to person. Some will narrow it to fixing errors (bugs) while others will rely on the systematic search for the errors that precedes their fixing. Ability-wise, we understand that debugging is a system awareness, it is about knowing what and how something is happening, internally. By having a clear vision of the internal process of something one may spot unnoticed misbehaviors, their cause and how to fix them. Prediction. One of the most useful consequences of a detailed examination is the possibility of making predictions of future events based on the subject’s behavior, features and/or properties. It is at the core of all science to hypothesize, to test and then report the findings. That early part about stating what could or should happen in a given situation is grounded on evaluation, it precedes testing, and in fact sometimes testing isn’t even necessary to validate it. Most of the theoretical development is not made on the classic empirical positivist science way, but we are skipping this debate, we just mentioned it to highlight the power of prediction. Classification. Determining efficiency, properties, if it is working or not and what should happen in the future are all external processes built on top of what we are evaluating. But analyzing its internal structures may lead us to reorganize them, classifying it, sorting it, clustering it. Classification is a matter of systematic organization, ensuring things that belong to the same class share a minimal set of features. It usually cross Abstraction because generalization and pattern recognition both ground it, and Data because visualization is its enabler and power house. Evaluation in CS. We are getting in touch with completely new ways of evaluating, AI has brought surprise even to their creators by solving problems in ways we could not anticipate (LEHMAN; CLUNE; MISEVIC, 2018). For instance, it is scary of how perfect a deep fake video can get, but if it takes a neural network to make one, why not use a neural network to detect one (GÜERA; DELP, 2018)? You know, modern problems require modern solutions, CS has been automating evaluation for a long time now, we are probably near a next step. Recalling that automation, CS spread an humongous amount of tools to improve the gathering, storing, sharing and processing of information, which increased accuracy and precision of the evaluation process of researchers across nearly all fields. Examples. Figure 12 illustrates the main concepts discussed in this subsection: detailed examination, efficiency and property check, test and debug, prediction and classification. In the sequence, a frame shows examples of what is included in the CT Line of Data: (CTS) Topics such as text analysis (detailed examination) in languages classes and experiments in general (test) in chemistry and physics classes; (CTS) Expressions such as sorting (classification) and tracking errors (debug); and (CTS) Sensibility(ies) such as taking account of properties and realizing better alternatives (efficiency).Evaluation: ; (Languages) Text Analysis ; (Languages) Grammatical Classes ; (Math) Systems of Equations ; (Chemistry) Classifications of Acids and Bases ; (Chemistry and Physics) Experiments in General Expressions – Evaluation: ; Testing ; Fixing errors ; Tracking errors ; Sorting Sensibilities – Evaluation: ; Awareness of the Internal Behavior ; Spotting Malfunction and Misbehavior ; Taking Account of Properties ; Realizing Better Alternatives|0