Mechanics|Description|Score
(data) analysis|The process of building new information about the existing data, based on them.|0
(data) collection-gathering|The prior process of obtaining the information to generate data.|0
(data) representation|The process of defining or choosing the data structure and modeling the data into it accordingly.|0
(data) transformation|The process of migrating data from a structure to another.|0
(data) visualization|The process of accessing and/or granting access to data, which relies on representation and enables/powers interpretation and analysis. Visualization targets not only analysis, but communication. How to inform, how to show, how to pass on information?|0
(non)determinism|The property of always progressing the same way, producing the same outputs when the process is executed using the same inputs and/or initial conditions. In turn, non-determinism is the absence of that property.|0
abstraction|The process of extracting features from a source in a given context and putting them isolated in a new context. The set of features selected to the new context is also called an abstraction. The features left behind in the source are said abstracted. The given, original context is said the lower level/layer of abstraction. The new context is said the upper level. When the abstraction keeps referring specifically to its origin, being merely a representation of something more complex, it is said to be shallow. When the abstraction loses sight of its origin or is not restrained to it, becoming something on its own, it is said to be deep.|0
algorithm|A description of a process composed by an organized finite collection of unambiguous steps.|0
algorithmic thinking|A habit of mind where the thinker tries to shape a thought as an algorithm, caring about the definition of each step, the flow of control to organize them, and eventually non-determinism, parallelism, inputs and outputs.|0
automation|The process of granting autonomy. Decreasing dependency of your guidance by giving instructions reachable without consulting you.|0
classification|A systematic organization into classes, ensuring things that belong to the same class share a minimal set of features. Usually the classes are defined and then we try to fit thing into them. But there is also the inverse process, clustering, when things are first organized based on their similarities and then their groups form classes, the clusters.|0
data|Quantized information. Information made up by a finite set of discrete units, what allows it to be transmitted and operated by computers.|0
data structure|A model that defines how the building blocks of data are organized in order to raise up meaning, how they can relate and how to access, modify or operate upon the data modeled by it.|0
dealing with complexity|As the process extract a subset of features, it is a proper way of pruning complexity out of an object.|0
debugging|The process of fixing the errors (called bugs in CS). Or the systematic search for errors (tracking) that precedes their fixing. Ability-wise, debugging is a system awareness, it is about knowing what is happening and how. Or, yet, making the system more transparent, clearly self-reporting its processes, so misbehavior and unexpected values can be spotted and traced.|0
decomposition-composition|Decomposition is the process of breaking things down into parts. Reformulating or recognizing a whole as a collection of constituents. Composition is the reverse of it, how to assemble parts up into a whole. Or, reformulating/recognizing a collection of things as a single whole.|0
development|The process of creating software artifacts, such as games and mobile applications. From the perspective of automation, as defined above, coding a software is enabling the computer to consult the code (instead of you) to decide what to do. The more it relies on your inputs along its execution, the less autonomous it will be.|0
emergence|Whenever something shows a feature or behavior that is not shown by any of its parts on their own, those features/behaviors are said emergent. When the whole is more than the sum of the parts, like a water resting in a glass, it is more than the sum of moles of ùêª2ùëÇ molecules. It has features that comes from the interaction of the molecules, emergent features, as surface tension. Information-wise, emergence is specially interesting for being able to create complex systems out of simple structures, as studied in swarm behavior and hive mind. A pretty visual real life example is the autonomous fluid-like behavior assumed by schools of fish and some flock of birds.|0
evaluation-analysis|The process of defining or recognizing values through a detailed examination. One of the most useful consequences of a detailed examination is the possibility of making predictions of future events based on the subject‚Äôs behavior, features and/or properties.|0
flow of control|The organization of how the process progress through time. The structures to define the flow of a process are: sequences, repetitions and conditionals. Additionally, there are structures to merge and split flows when there is parallelism.|0
functions and procedures|A collection of organized steps used to represent a single action/process. Essentially, a composite step.|0
generalization|To generalize is to turn something specific into a generic version that could reproduce the same, or similar behavior in different situations. By means of abstraction as defined above, it is the process of finding the minimum set of features that preserves the desired behavior and forgetting all the remaining that makes the object specific.|0
heuristic|A suboptimal procedure used to simulate or estimate what has no suitable, viable or practical optimal solution.|0
hiding-unnecessary-details|The shallow abstraction is the creation of a simple representation that hides information not needed at the given moment.|0
higher-order-data-structure)|A data structure used to organize values (which, in turn, are defined by primitive data structures). It is what people usually refer to when talking about data structures, such as lists, tables, charts and graphs.|0
iInput-output|Respectively, external information given to the process, and information given by the process to its exterior. That is, what goes in and what comes out.|0
integration|The process of adding new parts into an already existing group/whole, e.g. connecting a sensor into a local network may be integrating the sensor to an IoT system. We differ that integration is how to fit a part into a whole, while composition is how to shape a whole that fits the sum of the parts. Ultimately, integration equals to composition iff all parts are going to be simultaneously unified into a totally new whole that has no previous structures to be integrated.|0
interfaces-API-communication-message passing|Interfaces are the men in the middle, it is the intermediate between two who are communicating, defining how they do it. When a system is designed, a part of it may be given the function of communicating with the external world, it is the interface of the system. As it is a part communicating for a whole, and it is often an important part not to be neglected, it is well fit for the decomposition line.|0
interrelationship|Parts in a given whole often rely or impact each other, establishing relations between them. Acknowledgement of those relations may be crucial for a (de)composition, so we are giving it a highlight. We are using the word ‚Äúinterrelationship‚Äù to emphasize it is about the relations between parts within a whole.|0
Iteration|One of the repetitions of a collection of steps being repeated in a process. To iterate is to repeat a collection of steps.|0
layers of abstraction|Whenever the process of abstraction as defined above is applied, it involves two layers, one where the source object lies, the other where the extracted features lies. This process has a set of features as input and as output, which means it can be applied upon its own output, over and over, generating multiple layers.|0
modeling-and-design|These words are sometimes used interchangeably. Here, we will define design as the theoretical conceptualization, something done in a planning phase. While modeling will be its practical counterpart, the actual shaping, something done in an execution phase. The products of those processes, models and designs, are composite abstractions, made of features extracted from different sources. For instance, to design/model a wheelchair, you extract features of wheels, of chairs, of the target users, and then merge those features up into a new construct.|0
optimization|The process of granting efficiency, increasing the ratio of a given output to its cost.|0
parallelism|The perspective that takes account of multiple executions occurring at the same time. In algorithms, as defined above, parallelism occurs when steps are organized in multiple flows. It may bring to the flow of control challenges of synchronization, since even when two flows have the same steps, the haste (speed) of what is executing them usually is not the same. It may also bring challenges of data management, potentially including disputes for resources, shared memories and deadlocks.|0
pattern recognition|To recognize a pattern is to spot that a feature is regularly recurring in a given context. By means of abstraction as defined above, it is the process of finding a set of features that is being shared among different objects.|0
primitive-data-structure|A data structure used to define the values we want to work with. It is commonly found with the name of data type, such as Booleans, characters and floating points.|0
program|An algorithm so precisely defined to a given computational model that each of its steps are either a collection of other steps or a trivial instruction. Where trivial instruction is one that the computational model declares/is known to correctly interpret and perform.|0
property|A trait, quality or virtue of something. Properties may be found and/or quantified through evaluation. Some properties are commonly addressed in CS, such as efficiency, correctness, usability, portability, interoperability, flexibility, durability, reliability, safety and maintainability.|0
recursion|When something is defined by means of itself, its type or similar. Recursion is a natural phenomenon spotted by and reachable through decomposition: whenever you are able to decompose something and at least one of its parts have the same structure of the whole, there is recursion.|0
reuse-remixing|To use a previous solution, model or object into a new problem, context or environment is not always connected to parts and wholes (thus, to this decomposition line). But one of the main reasons to apply decomposition is the potential to reuse parts, being those parts from previous solutions or even from this own, if it shows regularities. That means the ability to reuse is fairly often important to decomposition.|0
scale|A notion of the size, extent or degree of something. When two values are so distinctive in size it becomes unreasonable to compare, they are said to be of different scales. To scale (up) is to reach values of an upper scale, i.e. to reach values so higher that they are unreasonable to compare with those reached initially. Automation enables scaling by replacing the constant effort of time consuming guidance with autonomy.|0
semiotic-data-structure|A data structure used to define how to communicate or express, such as numeral systems, codes and natural, sign, formal and programming languages.|0
simplification|The process of abstraction as defined above always result in a set of features that is a subset of the original. Which means it is always a simplification process that cuts out some information.|0
simulation|A system that imitates or approximates another. Simulation is included in the automation line because simulations are meant to be self-contained, needing no guidance during their executions, only the initial conditions.|0
sorting|A systematic organization into an ordered sequence, ensuring all things are chained to their previous and to their next respecting the same rule, an order.|0
step|''An action, proceeding, or measure often occurring as one in a series¬¥¬¥ (Merriam-Webster, 2020). In algorithms, steps shall be unambiguous, avoiding to be interpreted in two different ways.|0
test|An experimental execution directed towards checking if or how something happens, often in a partial, controlled environment.|0
tinkering|The process of creating hardware artifacts, such as robots and electronic networks. From the perspective of automation, as defined above, it is often desirable that electronic systems rely on sensors and their own rules to react to the data captured through the sensors (being autonomous).|0