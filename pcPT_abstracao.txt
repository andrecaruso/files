Abstraction|Abstraction: The most common definitions for abstraction in the literature revolve around generalization (Yadav et al., 2014; Lee et al., 2011) and/or ignoring/hiding details (Lu and Fletcher, 2009; Angeli et al., 2016). We elected an excerpt to summarize it: “Abstraction is “the process of generalizing from specific instances.” In problem solving, abstraction may take the form of stripping down a problem to what is believed to be its bare essentials. Abstraction is also commonly defined as the capturing of common characteristics or actions into one set that can be used to represent all other instances.” Lee et al. (2011). Word History Sengupta et al. (2013) traces the history of abstraction study back to ancient Greece with Plato (360 BCE) and Aristotle (384 BCE) and their concepts of forms (qualities) and sensibles (what is perceived through sensations). Then he brings it to the later philosophers Locke and Jean Piaget, highlighting the famous abstract-concrete and particular-general distinctions. Etymologically, Merriam-Webster (2020) says it comes from Latin roots ab- (“from” or “away”), plus trahere (“to pull” or “to draw”). Relation with Computer Science Recursion of abstractions are severely used in CS, raising what we call layers of abstraction: we draw on physical (electronic) switches to conceive bits, an abstraction used to establish boolean logic, which we draw on to build logic gates, from which we draw instructions, and then macros, functions, programs and systems. Another distinction of the abstraction in CS is that it aims to build highly independent layers, as Wing (2011) points, a software developer may ignore details of the underlying hardware, the operating system, the file system, or the network. Sengupta et al. (2013) traces the history of abstraction study back to ancient Greece with Plato (360 BCE) and Aristotle (384 BCE) and their concepts of forms (qualities) and sensibles (what is perceived through sensations). Then he brings it to the later philosophers Locke and Jean Piaget, highlighting the famous abstract-concrete and particular-general distinctions. Etymologically, Merriam-Webster (2020) says it comes from Latin roots ab- (“from” or “away”), plus trahere (“to pull” or “to draw”). Recursion of abstractions are severely used in CS, raising what we call layers of abstraction: we draw on physical (electronic) switches to conceive bits, an abstraction used to establish boolean logic, which we draw on to build logic gates, from which we draw instructions, and then macros, functions, programs and systems. Another distinction of the abstraction in CS is that it aims to build highly independent layers, as Wing (2011) points, a software developer may ignore details of the underlying hardware, the operating system, the file system, or the network.


Abstração: As definições mais comuns para abstração na literatura giram em torno da generalização (Yadav et al., 2014; Lee et al., 2011) e/ou ignorar/ocultar detalhes (Lu e Fletcher, 2009; Angeli et al., 2016) . Elegemos um trecho para resumir: “Abstração é “o processo de generalização a partir de instâncias específicas”. Na resolução de problemas, a abstração pode assumir a forma de reduzir um problema ao que se acredita ser o essencial. A abstração também é comumente definida como a captura de características ou ações comuns em um conjunto que pode ser usado para representar todas as outras instâncias. Lee e outros. (2011). História da Palavra Sengupta et al. (2013) traça a história do estudo da abstração de volta à Grécia antiga com Platão (360 aC) e Aristóteles (384 aC) e seus conceitos de formas (qualidades) e sensíveis (o que é percebido por meio de sensações). Em seguida, ele o traz para os filósofos posteriores Locke e Jean Piaget, destacando as famosas distinções abstrato-concreto e particular-geral. Etimologicamente, Merriam-Webster (2020) diz que vem das raízes latinas ab- (“de” ou “fora”), mais trahere (“puxar” ou “desenhar”). Relação com a Ciência da Computação Recursões de abstrações são severamente usadas em CS, elevando o que chamamos de camadas de abstração: recorremos a switches físicos (eletrônicos) para conceber bits, abstração utilizada para estabelecer a lógica booleana, que utilizamos para construir portas lógicas, a partir do qual extraímos instruções e, em seguida, macros, funções, programas e sistemas. Outra distinção da abstração em CS é que ela visa construir camadas altamente independentes, como aponta Wing (2011), um desenvolvedor de software pode ignorar detalhes do hardware subjacente, do sistema operacional, do sistema de arquivos ou da rede. Sengupta et al. (2013) traça a história do estudo da abstração de volta à Grécia antiga com Platão (360 aC) e Aristóteles (384 aC) e seus conceitos de formas (qualidades) e sensíveis (o que é percebido por meio de sensações). Em seguida, ele o traz para os filósofos posteriores Locke e Jean Piaget, destacando as famosas distinções abstrato-concreto e particular-geral. Etimologicamente, Merriam-Webster (2020) diz que vem das raízes latinas ab- (“de” ou “fora”), mais trahere (“puxar” ou “desenhar”). A recursão de abstrações é severamente usada em CS, elevando o que chamamos de camadas de abstração: recorremos a interruptores físicos (eletrônicos) para conceber bits, uma abstração usada para estabelecer a lógica booleana, da qual recorremos para construir portas lógicas, das quais extraímos instruções e depois macros, funções, programas e sistemas. Outra distinção da abstração em CS é que ela visa construir camadas altamente independentes, como aponta Wing (2011), um desenvolvedor de software pode ignorar detalhes do hardware subjacente, do sistema operacional, do sistema de arquivos ou da rede.