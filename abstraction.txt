Mechanics|Description|Score
Abstraction|The abstraction line Grammatically Multiclass. Abstraction is the nearest-to-unanimity term about CT, yet, we have found this word being interpreted in seemingly different ways in the literature. Ironically, definitions of abstraction are often too abstract. So, we are going to investigate and define this word, which is such a versatile one. It is commonly used as two nouns (abstraction and abstract), a verb (to abstract) and an adjective (abstract), not to mention all less used derivations. We are going to further discuss and illustrate the process of abstraction to reach a definition that matches the common uses of this word in the literature. Generalizing and simplifying. The most common definitions for abstraction in the literature revolve around generalization (YADAV et al., 2014; LEE et al., 2011) and/or ignoring/hiding details (LU; FLETCHER, 2009; ANGELI et al., 2016). We elected an excerpt to summarize it: “Abstraction is “the process of generalizing from specific instances.” In problem solving, abstraction may take the form of stripping down a problem to what is believed to be its bare essentials. Abstraction is also commonly defined as the capturing of common characteristics or actions into one set that can be used to represent all other instances.” (LEE et al., 2011) An ancient concept. SENGUPTA et al. (2013) traces the history of abstraction study back to ancient Greece with Plato (360 BCE) and Aristotle (384 BCE) and their concepts of forms (qualities) and sensibles (what is perceived through sensations). Then he brings it to the later philosophers Locke and Jean Piaget, highlighting the famous abstract-concrete and particular-general distinctions: “Locke proposed two types of ideas: particular and general. Particular ideas are constrained to specific contexts in space and time. General ideas are free from such restraints and thus can be applied to many different situations. In Locke’s view, abstraction is the process in which “ideas taken from particular beings become general representatives of all of the same kind” (Locke 1690/1979).” (SENGUPTA et al., 2013) A matter of abduction. Investigating its etymological origins we may illustrate the process of abstraction as something that encompasses all the aforementioned features that are attributed to this term. But we will make a distinction here, we are coining two terms: shallow abstraction and deep abstraction, both about carrying away (abducting) some features from a context to keep them isolated in another. “We trace the origins of abstract to the combination of the Latin roots ab-, a prefix meaning “from” or “away”, with the verb trahere, meaning “to pull” or “to draw”. The result was the Latin verb abstrahere, which meant “to remove forcibly” or “to drag away”. Its past participle abstractus had the meanings “removed”, “secluded”, “incorporeal”, and ultimately, “summarized”, meanings which came to English from Medieval Latin.” (MERRIAM-WEBSTER, 2020) Shallow abstraction. LU; FLETCHER (2009) explains the estimate-divide-average algorithm (EDA) and exemplify its use in the process of finding the square root of 60 by repeated guess and check: 2 ⇒ 16 ⇒ 9.875 ⇒ 7.975 ⇒ 7.749 ⇒ 7.746, where ⇒ denotes the EDA calculation. LU; FLETCHER (2009) explains ⇒ as an abstraction of the function λg.(g/60 + g)/2, that represents the EDA calculation. Generally, scientific papers present an abstract that is a short text giving only the most important facts or ideas the rest of the paper contains. Both are good examples of what we are calling shallow abstraction, analogue to a macro of programming language, it is just a representation, a short/simple/easy way to refer to something longer/more complex. Both goes through the process of abducting features away to a new context: in the first, the fact an input is being transformed by a process is abducted away from the formula that describes it to get into a sequence of transformations that tends to the square root of 60; and in the second, the key points of the paper (problem, methods and results) are abducted away from the whole body of the text to a concise, quick-to-read summary at the beginning of the article. Note that both keep contexts heavily tied to each other. Deep abstraction. When we break this connection, for instance, if ⇒ stop representing specifically λg.(g/60 + g)/2, but represents now any function with some set of properties. Then, we are enabling generalization by cutting the bounds with the context of origin, this is deep abstraction. So, if one extract some features from a context and put it, isolated, into a new context, it is already abstraction, but shallow. If one proceeds to reinforce the isolation, completely freeing the features from its origin, it is deep abstraction. The features being carried to a new context are the abducted ones, those left behind are the abstracted ones. Whenever we say “abstract that” it means to apply this process having as abstracted features the ones referred by “that”, i.e. to left behind all of “that”. We can define generalization in terms of abstraction as the process of finding multiple sources for the same set of abducted features. Sometimes not a process. It is common to hear that CS uses abstractions, and sometimes it is not referring to the process, but to the product of it. An abstraction (when not the process itself) is anything that is intrinsically a product of the process with the same name, i.e. a set of isolated features. Anything we find in the real world can be classified in abstractions that collect some of their features, but they always have a multitude of other features those abstractions don’t capture (or better, abduct), a multitude of features being abstracted away. For instance, consider a real dog called Bob. It has all the features dogs have, but not isolatedly, they are all intertwined with their bio and physical properties and all the individualities that define Bob. Bob is not an abstraction then, but “dog” is. From Bob we define “dog” by isolating features, as being breastfed when baby, having four legs, fur, a tail and such a potent snout. The power of abstraction. Abstraction may initially draw on the reality, but it may also lay on itself. We could define mammals from “dog”, abducting its first feature only. Here we are operating upon abstractions to make new abstractions. It allows us to leave reality behind, what comes very handy to problem solving and science, since reality is out of our control. Isolating variables to precisely investigate causes is a hard work in the real world, if we abstract those variables we may lose some information, but we can keep the control, which usually is a favorable trade-off. Abstraction also grounds imagination, abducting features from the reality to recombine them in our minds. That is how we could abduct the fur from Bob and the body plan of a salamander to conceive a furry dragon like Falkor from The Neverending Story (see Dragon in Figure 6). Concrete vs abstract. Although Falkor is a fantastic being, it does not feel abstract in the movie, it feels pretty concrete. Falkor does interact with its environment, it is a complex being with its physical properties reverberating in the fictional world it is put in. Being abstract or concrete is a matter of looking like a product of abstraction or not, respectively. The more isolated the concept is, the more it looks like a set of abducted features, thus, the more abstract it is. Antonymously, the more attached to its context, the more relations it stands within, the less it looks like a set of abducted features, and then, the more concrete it is. Think of abstract art, where shapes and colors are stripped of their visual references and meanings in the real world, claiming independence. Or an entrepreneur demanding concrete examples of how the product could help his business, he/she want to hear about its practical uses by real people, a product made of something with a cost, a rarity, a viability... not a theoretical model. Pattern Recognition. We can define pattern recognition in terms of abstraction as the process of finding a set of features that could be abducted from multiple sources. That is, to recognize a pattern can be seen as the process of finding an abstraction in common. If I can abduct the same features from multiple sources, then those sources share a pattern. After all, what is a pattern if not a recurring set of features? Pattern recognition is a concept that is usually highlighted in the literature (cited in 13 out of 28 in our SLR) and in informal resources (see Annex A). Although we can define it by means of abstraction, it may be best seen as a cross with other lines, such as evaluation and data. Abstraction in CS. CS severely uses recursion of abstractions, raising what we call layers of abstraction: we draw on physical (electronic) switches to conceive bits, an abstraction used to establish boolean logic, which we draw on to build logic gates, from which we draw instructions, and then macros, functions, programs and systems. Another distinction of the abstraction in CS is that it aims to build highly independent layers, as WING (2011) points, a software developer may ignore details of the underlying hardware, the Operating System (OS), the file system, or the network. In fact, the software is meant to work independently of which hardware, OS, file system or network will support it. In contrast, the classifications we use in biology serves no purpose if they are not directed towards the underlying layer. Why would we define a dog if not to organize/categorize the similar beings that constitute it in the layer below? Term 12 – Abstraction: The process of extracting features from a source in a given context and putting them isolated in a new context; or a intrinsically isolated set of features. The features selected to the new context are said abducted. The features left behind in the source are said abstracted. The given, original context is said the lower level. The new context is said the upper level. When the abducted features keep referring specifically to its origin, the abstraction is said to be shallow. When the abducted features lose sight of its origin or is not restrained to it, the abstraction is said to be deep. Anything that looks like a product of abstraction is said abstract, contrary to concrete, which is anything that does not seem to come out a process of abstraction. Examples. Figure 7 uses dices, cubes and polygons to illustrate the main concepts discussed in this subsection: concrete and abstract things, deep and shallow abstraction processes, abducted and abstracted features, abstractions (as nouns), layers of abstraction, generalization and patter recognition. In the sequence, a frame shows examples of what is included in the CT Line of Abstraction: (CTS) Topics such as concrete and abstract nouns in languages classes and variables (generalization) in math classes; (CTS) Expressions such as modeling (which involves deep abstraction) and representing (shallow abstraction); and (CTS) Sensibility(ies) such as awareness of layers of abstraction. Topics – Abstraction: ; (Languages) Concrete and Abstract nouns ; (Languages) Summary Writing ; (Math) Variables ; (Math) Formulas ; (Biology) Taxonomy Expressions – Abstraction: ; Classifying ; Generalizing ; Modeling ; Representing Sensibilities – Abstraction: ; Recognizing abstractions ; Awareness of lower layers ; Awareness of upper layers ; Pattern Recognition